{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { Reponse } from 'src/app/model/reponse';\nimport { ChatBotService } from 'src/app/service/chat-bot.service';\nvar InputChatComponent = /** @class */function () {\n  function InputChatComponent(toastr, fb, chatService) {\n    this.toastr = toastr;\n    this.fb = fb;\n    this.chatService = chatService;\n    this.reponse = new Reponse();\n    this.reponseSent = new EventEmitter();\n  }\n  InputChatComponent.prototype.ngOnInit = function () {\n    if (localStorage.getItem(\"membre\")) {\n      var membre = JSON.parse(localStorage.getItem(\"membre\"));\n      this.questionForm = this.fb.group({\n        text: [\"\", [Validators.required, this.questionValidateur()]],\n        membreId: membre.id\n      });\n    }\n  };\n  InputChatComponent.prototype.questionValidateur = function () {\n    return function (control) {\n      var scrumTeacher = [\"product owner\", \"scrum master\", \"sprint backlog\", \"equipe de developpement\", \"scrum guide\", \"product backlog\", \"productbacklog\", \"sprintbacklog\", \"sprint\", \"timebox\", \"burn-up chart\", \"burn-down chart\", \"daily meet\", \"sprint planning\", \"sprint retrospective\", \"sprint review\", \"cahier de charge\", \"agile\", \"scrum\", \"projet scrum\", \"test scrum\", \"agilit√©\"];\n      var value = control.value;\n      if (value && !scrumTeacher.some(function (element) {\n        return value.includes(element);\n      })) {\n        return {\n          'question': true\n        };\n      }\n      return null;\n    };\n  };\n  InputChatComponent.prototype.envoyerQuestion = function () {\n    var _this = this;\n    if (this.questionForm.valid) {\n      this.chatService.poserQuestion(this.questionForm.value).subscribe(function (data) {\n        var reponse = data;\n        if (/\\<[^\\>]+\\>/.test(data.text)) {\n          reponse.useHtml = false;\n        } else {\n          reponse.useHtml = true;\n          reponse.text = reponse.text.replace(/\\n/g, '<br>');\n        }\n        _this.reponse = reponse;\n        _this.reponseSent.emit(_this.reponse);\n        _this.reponse = {};\n      }, function (errors) {\n        _this.toastr.error(\"vous avez d\\u00E9j\\u00E0 envoyer une question paraille\");\n      });\n    } else {\n      console.log(\"error\");\n    }\n  };\n  __decorate([Output(), __metadata(\"design:type\", Object)], InputChatComponent.prototype, \"reponseSent\", void 0);\n  InputChatComponent = __decorate([Component({\n    selector: 'app-input-chat',\n    templateUrl: './input-chat.component.html',\n    styleUrls: ['./input-chat.component.scss']\n  }), __metadata(\"design:paramtypes\", [ToastrService, FormBuilder, ChatBotService])], InputChatComponent);\n  return InputChatComponent;\n}();\nexport { InputChatComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}